(function(){
	$(function(){
		var el = app.km.elements.shops = {};
		$.extend(el, {
			parent: app.km.elements,
			data_key: 'shops_count',
			init: function(){
				var base = this.parent.getElement('shops');
				$.extend(base, this);
				$.extend(this, base);
				this.initPanel();
				this.initChart();
				this.initMap();
			},
			initMap: function(){
				$.extend(this.map, {
					addContent: function(opts){
						var content = this.getContent(opts);
						$.extend(content, {
							initContent: function(){
								this.initName();
								this.initLoadingUnloading();
								this.initDeluveriesCount();
								this.addContents();
							},
							initDeluveriesCount: function(){
								if(this.data.deliveries_count > 0){
									var fields = this.lang.fields;
									var label = fields.deliveries_count;
									label = label.replace('#{deliveries_count}', this.data.deliveries_count);
									var container = $('<span></span>');
									container.html(label);
									this.els.push(container);
								}
							},
							initLoadingUnloading: function(){
								var fields = this.lang.fields;
								var icons = this.map.config.icons.info_window;
								var container = $('<span class="km_info_element_group"></span>');
								var label = $('<span class="km_info_float_label"></span>');
								var icon_key = this.data.has_loading_area ? 'on' : 'off';
								var icon = $('<img />', {
									src: icons[icon_key]
								});
								icon.addClass('km_info_element_icon')
								label.html(fields.loading_unloading);
								label.appendTo(container);
								icon.appendTo(container);
								container.append('<span class="clear"></span>');
								this.els.push(container);
							},
							initName: function(){
								var el = $('<b></b>');
								el.html(this.data.name);
								this.els.push(el);
							}
						});
						return content;
					},
					addMarker: function(opts){
						var marker = this.getMarker(opts);
						$.extend(marker, {
							initMarker: function(){
								var config = this.map.config.marker;
								var length = this.data.f_length;
								this.marker = new google.maps.Circle(
									$.extend({
										fillColor: this.parent.color,
										center: this.location,
										radius: this.getLength(length)
									}, config.opts, this.marker_opts)
								);
							},
							getLength: function(val){
								var config = this.map.config.marker;
								if(val < config.min) val = config.min;
								else if(val > config.max) val = config.max;
								return val;
							}
						});
						return marker;
					}
				});
			},
			initChart: function(){
				$.extend(this.chart, {
					render: function(){
						var data = [];
						var series = [];
						var el = {};
						$.each(this.data, function(key, val){
							data.push([val.s_type_name, val.total]);
						});
						$.extend(el, {
							type: 'pie',
							data: data
						});
						series.push(el);
						this.wrapper.highcharts(
							$.extend({
								series: series
							}, this.chart_opts)
						);
					}
				});
			},
			initPanel: function(){
				$.extend(this.panel, {
					init: function(){
						this.initContainer();
					},
					initContainer: function(){
						this.container.addClass('full');
					}
				});
				this.panel.init();
			}
		});
		el.init();
	});
})(jQuery);