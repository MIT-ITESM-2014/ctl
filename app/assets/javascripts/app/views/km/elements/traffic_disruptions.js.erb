(function(){
	$(function(){
		var el = app.km.elements.traffic_disruptions = {};
		$.extend(el, {
			parent: app.km.elements,
			data_key: 'disruption_average',
			init: function(){
				var base = this.parent.getElement('traffic_disruptions');
				$.extend(base, this);
				$.extend(this, base);
				this.initPanel();
				this.initChart();
				this.initMap();
			},
			initMap: function(){
				$.extend(this.map, {
					addContent: function(opts){
						var content = this.getContent(opts);
						$.extend(content, {
							initContent: function(){
								this.initDuration();
								this.addBaseElement('source_name');
								this.addBaseElement('duration');
								this.initVehiclesAffected();
								this.addContents();
							},
							initVehiclesAffected: function(){
								if(this.data.vehicles_affected != null){
									this.addBaseElement('vehicles_affected');
								}
							},
							initDuration: function(){
								var fields = this.lang.fields;
								var duration = (this.data.duration / 60);
								duration = duration.toFixed(2);
								duration = parseFloat(duration);
								this.data.duration = duration + ' ' + fields.mins;
							}
						});
						return content;
					},
					addMarker: function(opts){
						var marker = this.getMarker(opts);
						$.extend(marker, {
							initMarker: function(){
								var icons = this.map.config.icons.marker;
								var icon = icons[this.parent.key];
								this.marker = new google.maps.Marker(
									$.extend({
										draggable: false,
										position: this.location,
										animation: google.maps.Animation.DROP,
										icon: icon
									}, this.marker_opts)
								);
							}
						});
						return marker;
					},
					addLayer: function(key, data, index){
						var layer = this.getLayer(key, data, index);
						$.extend(layer, {
							initColor: function(){
								var colors = this.element.map.config.colors;
								this.color = colors[this.key];
							}
						});
						layer.init();
					}
				});
			},
			initChart: function(){
				$.extend(this.chart, {
					render: function(){
						var _self = this;
						var categories = [];
						var series = [];
						var lang = this.element.lang.chart;
						var deliveries_data = {};
						var yAxis = {};
						var config = this.view.config.chart.charts[this.element.key];
						$.extend(yAxis, {
							title: {
								text: lang.y_label
							}
						});
						$.extend(deliveries_data, {
							name: lang.categories.deliveries,
							data: []
						});
						var disruptions_data = {};
						$.extend(disruptions_data, {
							name: lang.categories.disruptions,
							data: []
						});
						var now = new Date();
						var utc = Date.UTC(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
						var offset = this.view.km.utc_offset;
						var data = {};
						$.extend(data, {
							now: now,
							utc: utc,
							offset: offset
						});
						$.each(this.data, function(key, val){
							var el_data = {};
							$.extend(el_data, {
								val: val
							}, data);
							var element = _self.getElement(el_data);
							categories.push(element);
							deliveries_data.data.push(element.data.val.delivery_count);
							disruptions_data.data.push(element.data.val.disruption_count);
						});
						$.extend(series, [deliveries_data, disruptions_data]);
						this.wrapper.highcharts(
							$.extend({
								yAxis: yAxis,
								tooltip: {
									formatter: function(){
										return this.x.getTooltip(this);
									}
								},
								xAxis: {
									categories: categories,
									labels: $.extend({
										formatter: function(){
											return this.value.getLabel();
										}
									}, config.labels)
								},
								series: series
							}, this.chart_opts)
						);
					},
					getElement: function(data){
						var element = {};
						$.extend(element, {
							data: data,
							hours: null,
							_label: null,
							_tooltip: null,
							init: function(){
								this.initData();
							},
							getTooltip: function(obj){
								var label = this.getLabel();
								return label + '<br /><b>' + this.getFixed(obj.y) + '</b> mins'; ;
							},
							getFixed: function(val){
								val = val.toFixed(2);
								return parseFloat(val);
							},
							getLabel: function(){
								if(this._label == null){
									this._label = this.hours.start + ':00 - ' + this.hours.end + ':00';
								}
								return this._label;
							},
							initData: function(){
								this.initHours();
								this.data.val.delivery_count = this.from_time(this.data.val.delivery_count);
								this.data.val.disruption_count = this.from_time(this.data.val.disruption_count);
							},
							from_time: function(val){
								return (val / 60);
							},
							initHours: function(){
								this.hours = {};
								var _self = this;
								var start = new Date(this.data.utc);
								start.setHours(this.data.val.hour_i);
								start.setSeconds(this.data.offset);
								var end = new Date(start.getTime());
								end.setHours(end.getHours() + 1);
								$.extend(this.hours, {
									start: start.getHours(),
									end: end.getHours()
								});
								$.each(this.hours, function(key, val){
									if(val < 10) _self.hours[key] = ("0" + val);
								});
							}
						});
						element.init();
						return element;
					}
				});
			},
			initPanel: function(){
				$.extend(this.panel, {
					init: function(){
						this.initContainer();
					},
					appendTo: function(panel){
						this.panel = panel;
						this.panel.addColContainer(this.container);
					},
					initContainer: function(){
						this.container.addClass('small');
					}
				});
				this.panel.init();
			}
		});
		el.init();
	});
})(jQuery);
